import { moviesApi } from '@/api/movies';
import { Loading } from '@/components/common/Loading';
import { usePopularMovies } from '@/hooks/queries/usePopularMovies';
import { useMovieDetailModal } from '@/hooks/useMovieDetailModal';
import { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import Head from "next/head";
import { useEffect, useRef } from 'react';
import Home from '..';
import { MovieDetailResponse } from '@/types/MovieDetail.types';
import { overlay } from 'overlay-kit';
import { useRouter } from 'next/router';

export default function Detail({ movieDetail }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const { data: movies, isLoading } = usePopularMovies();

  if (isLoading === true) {
    return <Loading />;
  }

  if (movies == null || movies.length === 0) {
    return <div>영화 정보를 불러오는데 실패했습니다.</div>;
  }

  return (
    <>
      <Head>
        <title>Create N¨ext App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div id="wrap">
        <Home />
        <DetailPageOpenModal movieDetail={movieDetail} />
      </div>
    </>
  );
}

function DetailPageOpenModal({movieDetail}: {movieDetail: MovieDetailResponse}) {
  const router = useRouter();
  const { openMovieDetailModal } = useMovieDetailModal();
  const onceRef = useRef(false);

  useEffect(() => {
    if (!movieDetail || onceRef.current === true) {
      return;
    }
    
    (async () => {
      onceRef.current = true;
      openMovieDetailModal(movieDetail);
    })();
  }, [movieDetail, openMovieDetailModal]);

  useEffect(() => {
    const handleRouteChange = () => {
      overlay.closeAll();
    };

    router.events.on('routeChangeStart', handleRouteChange);
    return () => {
      router.events.off('routeChangeStart', handleRouteChange);
    };
  }, [router]);

  return null;
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { movieId } = context.params as { movieId: string };
  const movieDetail = await moviesApi.getDetail(Number(movieId));

  return {
    props: {
      movieDetail: movieDetail.data,
    },
  };
};